// variables

let c0  = 0.0478487627793223584957428264710;
let c1  = 0.0820874952323578596367661535721;
let c2  = 0.0919831947610306166536978645902;
let c3  = 0.104185866120626902522184256527;
let c4  = 0.159508419728932319992375824582;
let c5  = 0.1787372607291718755716205007246;
let c6  = 0.180669120116622322543727539983;
let c7  = 0.210241281833874424403594384522;
let c8  = 0.2707204554902024922253183653148;
let c9  = 0.34319353022244057407246218081548;
let c10 = 0.347313533259692355979268469051;
let c11 = 0.3602517244988994027025508153653;
let c12 = 0.393388829036478811293779158091;
let c13 = 0.425281025454798433709228334388;
let c14 = 0.439296728020722972632966333641;
let c15 = 0.457779235446372389179242869890;
let c16 = 0.502701949951372894064838005397;
let c17 = 0.542220764553627610820757130110;
let c18 = 0.5828995347449824144241690772051;
let c19 = 0.606611170963521188706220841909;
let c20 = 0.635522307288672858112822718909;
let c21 = 0.683371070067995216608565545380;
let c22 = 0.728499690936574881404561235204;
let c23 = 0.735967916735595431954156281793;
let c24 = 0.765540078452847533814023126332;
let c25 = 0.785348431692693064277841342634;
let c26 = 0.832685557057201783926745491732;
let c27 = 0.847627573685205393450789279904;
let c28 = 0.889534297813319966800025599161;
let c29 = 0.8954763364645277519465321063751;
let c30 = 0.943151259243881817126719892570;
let c31 = 0.9462091985694698563577506663151;

// c0  = (-(x^2) * (321 + 8*phi) + x * (149*phi - 4) + 4 * (153 - 4*phi)) / 209
// c1  = ((x^2) * (149*phi - 4) - 2 * x * (15 + 16*phi) - (8 + 329*phi)) / 209
// c2  = phi * (3 - (x^2))
// c3  = phi * (2 * x - phi - 3 / x)
// c4  = (-12*(x^2) * (1 + 15*phi) + x*(119 + 113*phi) + 3*(89*phi - 8)) / 209
// c5  = (1 + phi - x) / (x^3)
// c6  = (3 * x * (29*phi - 12) - (61 + 79*phi) + (137 - 35*phi) / x) / 209
// c7  = (x * (117 + 83 * phi) - (63 + 109 * phi) - (184 + 43 * phi) / x) / 209
// c8  = x * phi * (x - phi)
// c9  = ((x^2) * (59*phi - 10) - 5*x * (15 + 16*phi) + 2*(59*phi - 10)) / 209
// c10 = (phi^2) * (x - 1 - 1 / x)
// c11 = 1 / (x * phi)
// c12 = phi * (1 - 1 / x) / x
// c13 = (2*(x^2) * (104*phi - 7) - 7*x*(15 + 16*phi) - (28 + 211*phi)) / 209
// c14 = (phi^3) / (x^2) - 1
// c15 = phi * (1 / (x^2) + phi / x - 1)
// c16 = (x * (4 + 3 * phi) + (13 * phi - 8) - (11 + 13 * phi) / x) / 19
// c17 = phi * (phi - phi / x - 1 / (x^2))
// c18 = 1 / x
// c19 = 1 - phi / x + phi / (x^2)
// c20 = (-x * (29*phi - 12) + (96*phi - 119) + (24 + 151*phi) / x) / 209
// c21 = (8 * x * (1 + 15*phi) + (64*phi - 149) - 2 * (89*phi - 8) / x) / 209
// c22 = phi * (1 - phi / (x^2))
// c23 = (-4 * x * (29 + 17*phi) + (175 + 117*phi) + (186 + 73*phi) / x) / 209
// c24 = (-x * (72*phi - 37) + (173 + 87*phi) + 5 * (13*phi - 27) / x) / 209
// c25 = phi * (phi - x + 1 / x)
// c26 = x * phi + 1 - (x^2)
// c27 = (-x * (104*phi - 7) + (157 + 56*phi) + 14 * (1 + 15*phi) / x) / 209
// c28 = (phi / x)^2; //
// c29 = (3 * x * (1 + 15*phi) + (127 + 24*phi) - (119*phi - 6) / x) / 209
// c30 = phi / x
// c31 = (2 * (x^2) * (14 + phi) + x * (1 + 15 * phi) + 4 * (14 + phi)) / 209

let hexpropelloDodecahedron = {};
hexpropelloDodecahedron['name'] = "Hexpropello Dodecahedron";
hexpropelloDodecahedron['points'] = [[c2,c3,1.0],[c2,-c3,-1.0],[-c2,-c3,1.0],[-c2,c3,-1.0],[1.0,c2,c3],[1.0,-c2,-c3],[-1.0,-c2,c3],[-1.0,c2,-c3],[c3,1.0,c2],[c3,-1.0,-c2],[-c3,-1.0,c2],[-c3,1.0,-c2],[c9,c0,c31],[c9,-c0,-c31],[-c9,-c0,c31],[-c9,c0,-c31],[c31,c9,c0],[c31,-c9,-c0],[-c31,-c9,c0],[-c31,c9,-c0],[c0,c31,c9],[c0,-c31,-c9],[-c0,-c31,c9],[-c0,c31,-c9],[0.0,c11,c30],[0.0,c11,-c30],[0.0,-c11,c30],[0.0,-c11,-c30],[c30,0.0,c11],[c30,0.0,-c11],[-c30,0.0,c11],[-c30,0.0,-c11],[c11,c30,0.0],[c11,-c30,0.0],[-c11,c30,0.0],[-c11,-c30,0.0],[c13,-c6,c29],[c13,c6,-c29],[-c13,c6,c29],[-c13,-c6,-c29],[c29,-c13,c6],[c29,c13,-c6],[-c29,c13,c6],[-c29,-c13,-c6],[c6,-c29,c13],[c6,c29,-c13],[-c6,c29,c13],[-c6,-c29,-c13],[c8,-c12,c28],[c8,c12,-c28],[-c8,c12,c28],[-c8,-c12,-c28],[c28,-c8,c12],[c28,c8,-c12],[-c28,c8,c12],[-c28,-c8,-c12],[c12,-c28,c8],[c12,c28,-c8],[-c12,c28,c8],[-c12,-c28,-c8],[c16,c7,c27],[c16,-c7,-c27],[-c16,-c7,c27],[-c16,c7,-c27],[c27,c16,c7],[c27,-c16,-c7],[-c27,-c16,c7],[-c27,c16,-c7],[c7,c27,c16],[c7,-c27,-c16],[-c7,-c27,c16],[-c7,c27,-c16],[c5,c17,c26],[c5,-c17,-c26],[-c5,-c17,c26],[-c5,c17,-c26],[c26,c5,c17],[c26,-c5,-c17],[-c26,-c5,c17],[-c26,c5,-c17],[c17,c26,c5],[c17,-c26,-c5],[-c17,-c26,c5],[-c17,c26,-c5],[c14,c15,c25],[c14,-c15,-c25],[-c14,-c15,c25],[-c14,c15,-c25],[c25,c14,c15],[c25,-c14,-c15],[-c25,-c14,c15],[-c25,c14,-c15],[c15,c25,c14],[c15,-c25,-c14],[-c15,-c25,c14],[-c15,c25,-c14],[c20,-c4,c24],[c20,c4,-c24],[-c20,c4,c24],[-c20,-c4,-c24],[c24,-c20,c4],[c24,c20,-c4],[-c24,c20,c4],[-c24,-c20,-c4],[c4,-c24,c20],[c4,c24,-c20],[-c4,c24,c20],[-c4,-c24,-c20],[c21,c1,c23],[c21,-c1,-c23],[-c21,-c1,c23],[-c21,c1,-c23],[c23,c21,c1],[c23,-c21,-c1],[-c23,-c21,c1],[-c23,c21,-c1],[c1,c23,c21],[c1,-c23,-c21],[-c1,-c23,c21],[-c1,c23,-c21],[c10,-c19,c22],[c10,c19,-c22],[-c10,c19,c22],[-c10,-c19,-c22],[c22,-c10,c19],[c22,c10,-c19],[-c22,c10,c19],[-c22,-c10,-c19],[c19,-c22,c10],[c19,c22,-c10],[-c19,c22,c10],[-c19,-c22,-c10],[c18,c18,c18],[c18,c18,-c18],[c18,-c18,c18],[c18,-c18,-c18],[-c18,c18,c18],[-c18,c18,-c18],[-c18,-c18,c18],[-c18,-c18,-c18]];
hexpropelloDodecahedron['lines'] = [[24,0],[0,12],[12,60],[60,84],[84,72],[72,24],[72,116],[116,106],[106,122],[122,50],[50,24],[50,38],[38,14],[14,2],[2,0],[25,3],[3,15],[15,63],[63,87],[87,75],[75,25],[75,119],[119,105],[105,121],[121,49],[49,25],[49,37],[37,13],[13,1],[1,3],[26,2],[14,62],[62,86],[86,74],[74,26],[74,118],[118,104],[104,120],[120,48],[48,26],[48,36],[36,12],[27,1],[13,61],[61,85],[85,73],[73,27],[73,117],[117,107],[107,123],[123,51],[51,27],[51,39],[39,15],[28,4],[4,16],[16,64],[64,88],[88,76],[76,28],[76,108],[108,96],[96,124],[124,52],[52,28],[52,40],[40,17],[17,5],[5,4],[29,5],[17,65],[65,89],[89,77],[77,29],[77,109],[109,97],[97,125],[125,53],[53,29],[53,41],[41,16],[30,6],[6,18],[18,66],[66,90],[90,78],[78,30],[78,110],[110,98],[98,126],[126,54],[54,30],[54,42],[42,19],[19,7],[7,6],[31,7],[19,67],[67,91],[91,79],[79,31],[79,111],[111,99],[99,127],[127,55],[55,31],[55,43],[43,18],[32,8],[8,20],[20,68],[68,92],[92,80],[80,32],[80,112],[112,101],[101,129],[129,57],[57,32],[57,45],[45,23],[23,11],[11,8],[33,9],[9,21],[21,69],[69,93],[93,81],[81,33],[81,113],[113,100],[100,128],[128,56],[56,33],[56,44],[44,22],[22,10],[10,9],[34,11],[23,71],[71,95],[95,83],[83,34],[83,115],[115,102],[102,130],[130,58],[58,34],[58,46],[46,20],[35,10],[22,70],[70,94],[94,82],[82,35],[82,114],[114,103],[103,131],[131,59],[59,35],[59,47],[47,21],[132,84],[60,108],[88,132],[64,112],[92,132],[68,116],[133,121],[105,45],[129,133],[101,41],[125,133],[97,37],[134,120],[104,44],[128,134],[100,40],[124,134],[96,36],[135,85],[61,109],[89,135],[65,113],[93,135],[69,117],[136,122],[106,46],[130,136],[102,42],[126,136],[98,38],[137,87],[63,111],[91,137],[67,115],[95,137],[71,119],[138,86],[62,110],[90,138],[66,114],[94,138],[70,118],[139,123],[107,47],[131,139],[103,43],[127,139],[99,39]];
hexpropelloDodecahedron['areas'] = [[24,0,12,60,84,72],[24,72,116,106,122,50],[24,50,38,14,2,0],[25,3,15,63,87,75],[25,75,119,105,121,49],[25,49,37,13,1,3],[26,2,14,62,86,74],[26,74,118,104,120,48],[26,48,36,12,0,2],[27,1,13,61,85,73],[27,73,117,107,123,51],[27,51,39,15,3,1],[28,4,16,64,88,76],[28,76,108,96,124,52],[28,52,40,17,5,4],[29,5,17,65,89,77],[29,77,109,97,125,53],[29,53,41,16,4,5],[30,6,18,66,90,78],[30,78,110,98,126,54],[30,54,42,19,7,6],[31,7,19,67,91,79],[31,79,111,99,127,55],[31,55,43,18,6,7],[32,8,20,68,92,80],[32,80,112,101,129,57],[32,57,45,23,11,8],[33,9,21,69,93,81],[33,81,113,100,128,56],[33,56,44,22,10,9],[34,11,23,71,95,83],[34,83,115,102,130,58],[34,58,46,20,8,11],[35,10,22,70,94,82],[35,82,114,103,131,59],[35,59,47,21,9,10],[132,84,60,108,76,88],[132,88,64,112,80,92],[132,92,68,116,72,84],[133,121,105,45,57,129],[133,129,101,41,53,125],[133,125,97,37,49,121],[134,120,104,44,56,128],[134,128,100,40,52,124],[134,124,96,36,48,120],[135,85,61,109,77,89],[135,89,65,113,81,93],[135,93,69,117,73,85],[136,122,106,46,58,130],[136,130,102,42,54,126],[136,126,98,38,50,122],[137,87,63,111,79,91],[137,91,67,115,83,95],[137,95,71,119,75,87],[138,86,62,110,78,90],[138,90,66,114,82,94],[138,94,70,118,74,86],[139,123,107,47,59,131],[139,131,103,43,55,127],[139,127,99,39,51,123],[12,36,96,108,60],[13,37,97,109,61],[14,38,98,110,62],[15,39,99,111,63],[16,41,101,112,64],[17,40,100,113,65],[18,43,103,114,66],[19,42,102,115,67],[20,46,106,116,68],[21,47,107,117,69],[22,44,104,118,70],[23,45,105,119,71]];

hexpropelloDodecahedron['distance'] = 20000.0;
hexpropelloDodecahedron['color'] = [255,255,255];

export { hexpropelloDodecahedron };
